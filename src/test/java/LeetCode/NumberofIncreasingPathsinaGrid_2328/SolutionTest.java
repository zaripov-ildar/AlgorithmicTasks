package LeetCode.NumberofIncreasingPathsinaGrid_2328;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.*;

class SolutionTest {

    Solution solution = new Solution();

    private static Stream<Arguments> testArguments() {
        return Stream.of(
                Arguments.of(new int[][]{{1, 1}, {3, 4}}, 8),
                Arguments.of(new int[][]{{1}, {2}}, 3),
                Arguments.of(new int[][]{
                        {1739, 39359, 29200, 81128, 19374, 28557, 53988, 95617, 34809, 36224, 60028, 31478, 28016, 20247, 79794, 76693, 46441, 60478, 26824, 11441, 29258, 7097, 53236, 14359, 64807, 74085, 23745, 75041, 96073, 97323, 75187, 88369, 48808, 20972, 3643, 34377, 89063, 44508, 3402, 86237, 54783, 97562, 92677, 31365, 39788, 41832, 2169, 63266, 89877, 3046, 97040, 25460, 42788, 34460, 13180, 40224, 53879, 52087, 20033, 53806, 56900, 97710, 66429, 76591, 19434, 95575, 74927, 80119, 87798, 21478, 39000, 62164, 61809, 5838, 84005, 82658, 36565, 58764, 22266, 50836, 52267, 88585, 7676, 4273, 96632, 57956, 79644, 29445, 22141, 69156, 15278, 52950, 23055, 59193},
                        {33132, 9909, 87099, 36133, 84324, 98997, 71866, 85650, 7638, 48499, 7730, 19075, 26746, 63412, 28410, 73792, 18241, 66433, 60460, 78340, 99601, 80899, 2116, 15645, 80026, 56984, 30931, 46800, 9498, 89942, 85826, 71171, 99041, 9216, 2830, 52754, 59616, 70927, 52084, 62242, 5833, 42052, 49007, 7035, 2332, 5479, 93637, 2848, 4422, 41672, 21296, 93392, 11861, 85253, 7097, 90580, 62425, 76802, 11466, 15095, 71039, 26613, 98162, 17215, 95665, 17358, 57757, 81409, 2438, 74059, 20488, 10905, 5642, 16606, 96965, 87815, 10533, 16537, 40249, 5786, 11181, 72286, 99181, 22526, 62707, 80863, 21654, 62673, 31986, 57927, 86940, 81418, 46500, 86085}, {45456, 37, 5245, 81146, 45066, 16696, 8629, 10972, 88458, 16509, 58140, 49276, 32473, 79691, 96240, 4057, 92206, 47862, 88742, 61701, 39604, 26987, 39118, 48632, 73757, 83221, 62298, 27923, 15262, 28362, 15326, 81933, 14404, 64257, 7446, 20717, 34098, 71920, 8395, 77327, 1017, 34109, 45241, 81102, 87500, 44496, 10689, 15348, 47927, 83142, 62407, 49360, 40496, 95239, 10179, 75337, 77518, 35885, 79548, 46241, 68363, 61908, 85241, 59368, 80089, 14415, 3845, 24635, 30123, 57955, 62918, 69737, 7052, 59704, 23966, 55655, 59610, 90783, 79042, 90015, 81982, 5645, 49555, 6547, 16550, 92405, 4726, 21736, 28626, 58222, 67652, 70926, 42066, 86573}, {9933, 78036, 41267, 38057, 94961, 50401, 99118, 24423, 79051, 90771, 12730, 35426, 23614, 18194, 98188, 12062, 25131, 77445, 29832, 83943, 49575, 56700, 31813, 38441, 27223, 66898, 63899, 60409, 51029, 84873, 64250, 45720, 2278, 6766, 73118, 46929, 2367, 20360, 83328, 70067, 18699, 73175, 12806, 51812, 91319, 45480, 32224, 13809, 17007, 32879, 64166, 79703, 98740, 71068, 1434, 76314, 62506, 44721, 32680, 21258, 87479, 28949, 77252, 95776, 68726, 52397, 61319, 10880, 21201, 42390, 86384, 33474, 75215, 63131, 81777, 37648, 72647, 38890, 40484, 38707, 93082, 66965, 37447, 89338, 9594, 84828, 10458, 91989, 11941, 7743, 37130, 47019, 53125, 87724}, {43734, 43482, 98230, 70324, 71303, 34843, 45063, 65084, 43111, 64920, 90198, 20283, 91066, 71854, 91048, 58612, 31155, 89709, 54647, 88880, 26296, 96639, 13031, 44382, 62236, 12843, 54257, 26198, 74282, 19697, 40752, 89314, 77696, 28350, 25195, 15750, 35656, 99640, 27608, 8337, 14666, 84457, 38070, 99191, 55312, 42329, 77273, 58681, 64857, 95230, 64737, 93562, 42018, 96054, 78543, 27973, 39061, 90145, 2643, 70004, 96664, 94858, 19658, 5909, 15638, 79223, 62495, 37492, 304, 50925, 27471, 86378, 3106, 59422, 53763, 86768, 36281, 14379, 92361, 85980, 91039, 93184, 41165, 93497, 42535, 36294, 28885, 4322, 89299, 16709, 40719, 68001, 98811, 18483}, {79233, 963, 67000, 48552, 68237, 2547, 86417, 94922, 47664, 17324, 43730, 71077, 66793, 59796, 37977, 70346, 36216, 50047, 29233, 69022, 40337, 25268, 67606, 36658, 95451, 54761, 43304, 30599, 65219, 59153, 29140, 73642, 51825, 85317, 42176, 42359, 32108, 61627, 82225, 43949, 67502, 76037, 63822, 75363, 13803, 6201, 83169, 35818, 3906, 24667, 66775, 11196, 75325, 78086, 39578, 88369, 9049, 5596, 48843, 61608, 77578, 22513, 14919, 57132, 83265, 18789, 57344, 68484, 94575, 3636, 98981, 1530, 98590, 44984, 57581, 16313, 12174, 90898, 1145, 79388, 12737, 22861, 18655, 70641, 34255, 91244, 84288, 86773, 21448, 85021, 62466, 1843, 10896, 66310}, {33368, 45126, 7240, 94601, 45852, 29856, 19154, 83201, 66081, 29278, 49297, 65781, 36424, 39783, 93472, 74859, 42567, 53725, 91793, 31435, 26657, 84442, 77714, 39361, 80875, 39965, 9368, 15358, 23833, 60770, 88027, 69335, 78696, 2805, 95358, 19980, 90760, 51004, 72062, 36953, 64391, 34140, 71886, 37041, 73675, 73556, 95073, 84034, 13252, 40571, 27955, 62379, 21331, 34331, 37706, 43959, 73831, 27336, 75463, 25021, 3163, 54973, 24236, 27936, 30216, 88752, 3763, 9816, 65998, 31502, 16588, 23415, 63730, 1780, 68844, 41506, 77722, 40231, 48561, 61763, 10461, 84181, 11745, 57882, 78359, 70642, 2099, 13329, 96768, 1484, 22564, 5570, 29565, 53152}, {65548, 6663, 62318, 46131, 43750, 4335, 92539, 62695, 54511, 15204, 10596, 36837, 96469, 95546, 92942, 42783, 95736, 59046, 76054, 88420, 16922, 3390, 69102, 84770, 39845, 26575, 56991, 89100, 13073, 70030, 14232, 57180, 71717, 63797, 51644, 95363, 71354, 16509, 34494, 16736, 86601, 14937, 70442, 26353, 44602, 82961, 18581, 11972, 35019, 37535, 64520, 18699, 35027, 41860, 81703, 93244, 69264, 55798, 36492, 57184, 31960, 23631, 20918, 2846, 77167, 758, 52449, 16057, 13088, 7205, 41936, 83970, 9485, 93145, 44754, 50663, 24452, 41525, 79229, 27384, 51928, 63841, 21218, 36732, 57556, 81469, 81474, 79620, 28337, 69094, 45699, 58276, 64533, 44550}, {39444, 49144, 99614, 1562, 84858, 55319, 60936, 4577, 88685, 58897, 16031, 90125, 57128, 15834, 50311, 43984, 40811, 48988, 2008, 5724, 93283, 24914, 1785, 16365, 18200, 44388, 76537, 27563, 85097, 46846, 54720, 83993, 75306, 46178, 33809, 52691, 43482, 47638, 4172, 821, 88284, 41377, 24519, 23435, 19860, 69534, 72018, 76480, 94546, 22300, 52525, 39774, 82106, 46392, 19983, 4796, 79491, 60762, 94659, 59917, 51943, 85547, 56926, 11775, 59028, 71465, 35564, 21930, 71541, 61710, 77415, 37096, 51469, 83368, 19662, 70783, 85132, 89317, 34957, 71669, 32305, 43041, 14339, 13244, 79159, 24511, 62874, 88083, 37744, 72792, 8348, 66298, 91420, 79311}},
                        5694)
        );
    }

    @ParameterizedTest
    @MethodSource("testArguments")
    void test(int[][] grid, int expected) {
        assertEquals(expected, solution.countPaths(grid));
    }

//    @Test
//    void timeTest() {
//        int m = 1000;
//        int n = 1000;
//        int[][] grid = new int[m][n];
//        Random rnd = new Random();
//        for (int i = 0; i < m; i++) {
//            for (int j = 0; j < n; j++) {
//                grid[i][j] = rnd.nextInt();
//            }
//        }
//        Timer timer = new Timer();
//        timer.compareFunctions(500,
//                () -> solution.countPaths(grid),
//                () -> solution.countPaths2(grid)
//        );
//    }
}